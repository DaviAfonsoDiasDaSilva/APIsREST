Servidor REST
Abaixo um exemplo mínimo que expõe um endpoint GET para /temperatura/{unidade}, onde {unidade} pode ser "celsius", "kelvin" ou "fahrenheit". O servidor calcula, a cada requisição,
TC=25+5 sen(t 2/24) + ruído
sendo “t” o número de horas (incluindo fração) desde meia-noite. Em seguida converte para a unidade desejada e retorna um JSON simples.
Passo a passo
1.          Criar o projeto vazio No terminal:
mkdir ServidorTemp
cd ServidorTemp
dotnet new webapi -n ServidorTemp
cd ServidorTemp
2.  Limpar o conteúdo gerado Apague tudo que existe em Program.cs, WeatherForecast.cs e na pasta Controllers/. (O único arquivo que restará será Program.cs.)
3.          Copiar o código abaixo em Program.cs	
using System;

 var builder = WebApplication.CreateBuilder(args);
 var app = builder.Build();

 // unidade: "celsius", "kelvin" ou "fahrenheit"
 app.MapGet("/temperatura/{unidade}", (string unidade) =>
 {
 	// 1) obter hora atual em horas totais (ex.: 14.5 = 14h30m)
 	double t = DateTime.Now.TimeOfDay.TotalHours;

 	// 2) calcular temperatura em Celsius sem ruído
 	double tempCBase = 25.0 + 5.0 * Math.Sin((2.0 * Math.PI / 24.0) * t);

 	// 3) adicionar ruído uniforme [0,1)
 	double ruido = Random.Shared.NextDouble();
 	double tempC = tempCBase + ruido;

 	// 4) converter para a unidade pedida
 	double resultado;
 	string uni = unidade.ToLower();
 	if (uni == "kelvin")
 	{
     		resultado = tempC + 273.15;
 	}
 	else if (uni == "fahrenheit")
 	{
     		resultado = tempC * 9.0 / 5.0 + 32.0;
 	}
 	else if (uni == "celsius")
 	{
     		resultado = tempC;
 	}
 	else
 	{
     		return Results.BadRequest(new { erro = "Unidade inválida. Use celsius, kelvin ou fahrenheit." });
 	}

 	// 5) retornar JSON simples: { "unidade": "...", "valor": <número> }
 	return Results.Ok(new
 	{
     	unidade = uni,
     	valor = Math.Round(resultado, 2)
 	});
 });

 app.Run();
4.          Executar o servidor No terminal, dentro da pasta ServidorTemp:
dotnet run
Você verá algo como:
Now listening on: http://localhost:5000
Now listening on: https://localhost:5001
5.          Testar com curl (ou Postman)
–            Celsius:
curl http://localhost:5000/temperatura/celsius
Exemplo de resposta:
{
   "unidade": "celsius",
   "valor": 29.43
}
–            Kelvin:
  	
curl http://localhost:5000/temperatura/kelvin

Retorno aproximado:
{
   "unidade": "kelvin",
   "valor": 302.58
}
–            Fahrenheit:
  	
curl http://localhost:5000/temperatura/fahrenheit

Retorno aproximado:
{
   "unidade": "fahrenheit",
   "valor": 87.17
}
               Se a {unidade} não for uma das três opções, retorna HTTP 400 com:
  
{
   "erro": "Unidade inválida. Use celsius, kelvin ou fahrenheit."
}
Explicação mínima do que acontece
1.    DateTime.Now.TimeOfDay.TotalHours: recupera o horário atual como um número de horas (por exemplo, 14.25 = 14h15m).
2.       25 + 5 * sin((2π/24) * t): gera uma onda senoidal diária (um “bump” ao longo de 24 h) com média 25 °C e amplitude 5 °C.
3.          Random.Shared.NextDouble(): adiciona ruído uniforme entre 0 e 1.
4.          Fazemos conversão de tempC para “kelvin” ou “fahrenheit” conforme a rota.
5.          Retornamos um objeto anônimo em JSON contendo { unidade, valor }.
Estrutura final do diretório
ServidorTemp/
 ├── Program.cs
 └── ServidorTemp.csproj
